module ltdc(clk,rst,hsync,vsync,rgb888);
    input clk;
    input rst;
    output hsync;
    output vsync;
    output [23:0]rgb888;
    reg [9:0]hpixels;
    reg [9:0]vlines;
    wire [9:0]xpos;
    wire [9:0]ypos;

    parameter LCD_HTOTAL = 624;
    parameter LCD_HSYNC = 48;
    parameter LCD_HACT = 480;
    parameter LCD_HBP = 72;
    parameter LCD_HFP = 24;
    
    parameter LCD_VTOTAL = 831;
    parameter LCD_VSYNC = 4;
    parameter LCD_VACT = 800;
    parameter LCD_VBP = 18;
    parameter LCD_VFP = 3;

    assign hsync = (hpixels <= LCD_HSYNC - 1'b1) ? 1'b0 : 1'b1;
    assign vsync = (vlines <= LCD_VSYNC - 1'b1) ? 1'b0 : 1'b1;

    assign xpos = hpixels - (LCD_HSYNC + LCD_HBP - 1'b1)
    assign ypos = vlines - (LCD_VSYNC + LCD_VBP - 1'b1)

    always @(posedge clk or negedge rst)begin
        if(!rst)
            hpixels<=10'd0;
        else begin
            if(hpixels<LCD_HTOTAL-1'b1)
                hpixels<=hpixels+1'b1;
            else
                hpixels<=10'd0;
        end
    end

    always @(posedge clk or negedge rst)begin
        if(!rst)
            vlines<=10'd0;
        else if(hpixels == LCD_HTOTAL - 1'b1) begin
            if(vlines < LCD_VTOTAL - 1'b1)
                vlines<=vlines+1'b1;
            else
                vlines<=10'd0;
        end
    end
    
    always @(posedge clk or negedge rst)begin
        if((xpos >= 0) && (xpos < (LCD_HACT/5)*1)) 
            rgb888 <= 24'hffffff; 
        else if((xpos >= (LCD_HACT/5)*1) && (xpos < (LCD_HACT/5)*2))
            rgb888 <= 24'h000000; 
        else if((xpos >= (LCD_HACT/5)*2) && (xpos < (LCD_HACT/5)*3))
            rgb888 <= 24'hff0000; 
        else if((xpos >= (LCD_HACT/5)*3) && (xpos < (LCD_HACT/5)*4))
            rgb888 <= 24'h00ff00; 
        else
            rgb888 <= 24'h0000ff; 
    end
endmodule