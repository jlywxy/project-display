module cy_lvdslcd(
	input clk_in,
	output led,
	output [3:0]txdata,
	output txclk
);

wire c35_locked;
wire sds_locked;

assign led=c35_locked&sds_locked;

wire clk;

lcdpll	lcdpll_inst (
	.inclk0 ( clk_in ),
	.c0 ( clk ),
	.locked ( locked_sig )
);

	
reg [27:0]serdes;
reg [24:0]counter;
initial begin
	serdes<=28'b1111111111111111111111111111;
	counter<=25'b0;
	led=0;
end
always @(posedge clk)begin
	if(counter<25000000)counter<=counter+1'b1;
	else begin
		counter<=0;
		//led=~led;
	end
end
lcd_serdes_tx	tx_auo (.tx_in ( serdes ),.tx_inclock ( clk ),
	.tx_out ( txdata ),.tx_outclock ( txclk ),.tx_locked ( sds_locked));

wire [23:0]rgb;
wire de;
ltdc_de ltdcrgb(.clk(clk),.rgbdata(rgb),.de(de));

always @(posedge clk)begin
	//serdes=28'b0;
	//serdes=serdes|(de<<20)|27'b0111111000000000000000000011;
	if(de==0)serdes<=28'b0000000000000000000000000000;
	else serdes<=    28'b1001111100111110011111001111;
end
	
endmodule

module ltdc_de(
	input clk,
	output reg [23:0]rgbdata,
	output de
);

parameter VTOTAL=508,
	VBP=28,
	HTOTAL=1056,
	HBP=256;

//parameter VTOTAL=50,
//	VBP=2,
//	HTOTAL=50,
//	HBP=2;
	
reg [15:0]h;
reg [15:0]v;
initial begin
	h<=16'b0;
	v<=16'b0;
end
assign de=(h>=HBP&&v>=VBP)?1:0;

always @(posedge clk)begin
	if(h<HTOTAL)h<=h+1'b1;
	else begin
		h<=0;
		if(v<HTOTAL)v<=v+1'b1;
		else v<=0;
	end
end

always @(posedge clk)begin
	if(de==1)begin
		if(h-HBP>0&&h-HBP<100)
			rgbdata<=24'hff0000;
		else if(h-HBP>100&&h-HBP<200)
			rgbdata<=24'h00ff00;
		else if(h-HBP>200&&h-HBP<300)
			rgbdata<=24'h0000ff;
		else
			rgbdata<=24'b0;
	end
end
endmodule